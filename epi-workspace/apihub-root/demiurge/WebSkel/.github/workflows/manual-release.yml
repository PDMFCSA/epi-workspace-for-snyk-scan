name: Manual Release

on:
  workflow_dispatch:
    inputs:
      version:
        description: "Version to release (e.g., 1.2.3 or v1.2.3)"
        required: true
      prerelease:
        description: "Mark release as prerelease"
        type: boolean
        required: false
        default: false

permissions:
  contents: write

jobs:
  release:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.repository.default_branch }}

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build
        run: npm run build

      - name: Create bundle entry point
        run: |
          cat > bundle-entry.js << 'EOF'
          // Bundle entry point that includes all WebSkel files
          import WebSkel from './webSkel.js';
          import { ResourceManager } from './managers/ResourceManager.js';

          // Import all utilities
          import * as browserUtils from './utils/browser-utils.js';
          import * as domUtils from './utils/dom-utils.js';
          import * as formUtils from './utils/form-utils.js';
          import * as modalUtils from './utils/modal-utils.js';
          import * as templateUtils from './utils/template-utils.js';
          const utils = {
              browserUtils,
              domUtils,
              formUtils,
              modalUtils,
              templateUtils
          };

          const originalInitialise = WebSkel.initialise;

          WebSkel.initialise = async function(configsPath) {
              if (WebSkel.instance) {
                  return WebSkel.instance;
              }
              let webSkel = new WebSkel();
              for (const utilBundle of Object.values(utils)) {
                  for (const [fnName, fn] of Object.entries(utilBundle)) {
                      webSkel[fnName] = fn;
                  }
              }
              await webSkel.loadConfigs(configsPath);
              WebSkel.instance = webSkel;
              return WebSkel.instance;
          };

          // Export everything for the bundle
          export default WebSkel;
          export {
              ResourceManager,
              browserUtils,
              domUtils,
              formUtils,
              modalUtils,
              templateUtils
          };

          // Also make WebSkel available globally for UMD builds
          if (typeof globalThis !== 'undefined') {
              globalThis.WebSkel = WebSkel;
          }
          EOF

      - name: Bundle ESM (inline utils)
        run: |
          mkdir -p dist
          npx --yes esbuild bundle-entry.js \
            --bundle \
            --format=esm \
            --platform=browser \
            --outfile=dist/webskel.mjs

      - name: Bundle UMD (inline utils)
        run: |
          npx --yes esbuild bundle-entry.js \
            --bundle \
            --format=iife \
            --global-name=WebSkel \
            --platform=browser \
            --outfile=dist/webskel.umd.js

      - name: Copy bundles to releases folder
        run: |
          mkdir -p releases
          cp -f dist/webskel.mjs releases/webskel.mjs
          cp -f dist/webskel.umd.js releases/webskel.umd.js

      - name: Clean up temporary files
        run: rm -f bundle-entry.js

      - name: Show git status
        run: git status

      - name: Commit bundles into repo
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add releases/ dist/
          if git diff --cached --quiet; then
            echo "No bundle changes to commit"
          else
            echo "Committing bundles into releases/"
            git commit -m "chore(release): add bundles for ${{ github.event.inputs.version }}"
            git push origin HEAD:${{ github.event.repository.default_branch }}
          fi

      - name: Compute tag name
        id: tag
        run: |
          VERSION='${{ github.event.inputs.version }}'
          if [[ "$VERSION" =~ ^v ]]; then TAG="$VERSION"; else TAG="v$VERSION"; fi
          echo "tag=$TAG" >> "$GITHUB_OUTPUT"

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ steps.tag.outputs.tag }}
          name: ${{ steps.tag.outputs.tag }}
          draft: false
          prerelease: ${{ github.event.inputs.prerelease }}
        env:
          GITHUB_TOKEN: ${{ secrets.GIT_TOKEN }}

