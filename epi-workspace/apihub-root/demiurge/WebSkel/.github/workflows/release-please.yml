name: Release Please

on:
  push:
    branches:
      - master
      - main
  workflow_dispatch:
    inputs:
      version:
        description: "Version to release"
        required: false
        default: "0.0.0"

permissions:
  contents: write
  pull-requests: write

jobs:
  release-please:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Compute release version (for manual runs)
        if: github.event_name == 'workflow_dispatch'
        id: compute_version
        run: |
          INPUT_VERSION='${{ github.event.inputs.version }}'
          if [ -z "$INPUT_VERSION" ] || [ "$INPUT_VERSION" = "0.0.0" ]; then
            if [ -f package.json ]; then
              PKG_VERSION=$(grep -oP '"version"\s*:\s*"\K[^"]+' package.json || echo "0.0.0")
            else
              PKG_VERSION="0.0.0"
            fi
            IFS='.' read -r MAJ MIN PAT <<< "$PKG_VERSION"
            MAJ=${MAJ:-0}; MIN=${MIN:-0}; PAT=${PAT:-0}
            NEXT_VERSION="${MAJ}.${MIN}.$((PAT+1))"
          else
            NEXT_VERSION="$INPUT_VERSION"
          fi
          echo "version=${NEXT_VERSION}" >> "$GITHUB_OUTPUT"
      - name: Manual release PR (release-as)
        if: github.event_name == 'workflow_dispatch' && github.event.inputs.version != '' && github.event.inputs.version != '0.0.0'
        env:
          GITHUB_TOKEN: ${{ secrets.GIT_TOKEN }}
        run: |
          npx --yes release-please release-pr \
            --release-as ${{ steps.compute_version.outputs.version }} \
            --release-type node \
            --repo-url ${{ github.repository }} \
            --target-branch ${{ github.event.repository.default_branch }} \
            --token "$GITHUB_TOKEN"

      - name: Manual release PR (auto-patch when no version provided)
        if: github.event_name == 'workflow_dispatch' && (github.event.inputs.version == '' || github.event.inputs.version == '0.0.0')
        env:
          GITHUB_TOKEN: ${{ secrets.GIT_TOKEN }}
        run: |
          npx --yes release-please release-pr \
            --release-as ${{ steps.compute_version.outputs.version }} \
            --release-type node \
            --repo-url ${{ github.repository }} \
            --target-branch ${{ github.event.repository.default_branch }} \
            --token "$GITHUB_TOKEN"
      - uses: googleapis/release-please-action@v4
        if: github.event_name != 'workflow_dispatch' || github.event.inputs.version == '' || github.event.inputs.version == '0.0.0'
        id: release_auto
        with:
          release-type: node
          token: ${{ secrets.GIT_TOKEN }}
      # No log step for manual CLI mode; outputs are not available
      - name: Log release info (auto)
        if: steps.release_auto.outputs.release_created == 'true'
        run: |
          echo "Release created: ${{ steps.release_auto.outputs.tag_name }}"


      - name: Find open release PR
        id: find_pr
        env:
          GH_TOKEN: ${{ secrets.GIT_TOKEN }}
        run: |
          PR_NUMBER=$(gh pr list -R ${{ github.repository }} -s open -l "autorelease: pending" -B ${{ github.event.repository.default_branch }} -L 1 --json number --jq '.[0].number')
          echo "number=${PR_NUMBER}" >> "$GITHUB_OUTPUT"

      - name: Merge release PR
        if: steps.find_pr.outputs.number != ''
        env:
          GH_TOKEN: ${{ secrets.GIT_TOKEN }}
        run: |
          gh pr merge -R ${{ github.repository }} ${{ steps.find_pr.outputs.number }} --squash --admin --delete-branch || \
          gh pr merge -R ${{ github.repository }} ${{ steps.find_pr.outputs.number }} --squash --auto --delete-branch

      - name: Create GitHub Release now (CLI)
        if: steps.find_pr.outputs.number != ''
        env:
          GITHUB_TOKEN: ${{ secrets.GIT_TOKEN }}
        run: |
          npx --yes release-please github-release \
            --release-type node \
            --repo-url ${{ github.repository }} \
            --target-branch ${{ github.event.repository.default_branch }} \
            --token "$GITHUB_TOKEN"

